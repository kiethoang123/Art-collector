{"version":3,"sources":["components/Feature.js","components/Loading.js","components/Search.js","components/Title.js","index.js"],"names":["Loading","id","className","Search","props","console","log","useState","centuryList","classificationList","queryString","setQueryString","century","setCentury","classification","setClassification","useEffect","onSubmit","event","htmlFor","type","placeholder","value","onChange","currentTarget","length","name","Title","num","App","info","records","setSearchResults","isLoading","setIsLoading","searchResults","ReactDOM","render","document","getElementById"],"mappings":";oLA+BA,ICZeA,EATC,WAEhB,OACA,yBAAKC,GAAG,WAAR,OACI,wBAAIC,UAAU,WAAd,gBADJ,O,yyMCFA,IAsFeC,EAtFA,SAACC,GAEhBC,QAAQC,IAAIF,GAaZ,MAAsCG,mBAAS,IAA/C,mBAAOC,EAAP,KACA,GADA,KACoDD,mBAAS,KAA7D,mBAAOE,EAAP,KACA,GADA,KACsCF,mBAAS,KAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,mBAAS,OAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA4CN,mBAAS,OAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KA6BE,OApBAC,qBAAU,cAEP,IAkBI,0BAAMf,GAAG,SAASgB,SAAQ,uCAAE,WAAOC,GAAP,qGAAF,uDAG/B,kCACE,2BAAOC,QAAQ,YAAf,SACA,2BACElB,GAAG,WACHmB,KAAK,OACLC,YAAY,oBACZC,MAAOZ,EACPa,SAAU,SAACL,GAAD,OAAUP,EAAeO,EAAMM,cAAcF,WAE3D,kCACE,2BAAOH,QAAQ,yBAAf,kBAAsD,0BAAMjB,UAAU,wBAAhB,IAA0CO,EAAmBgB,OAA7D,MACtD,4BACEC,KAAK,iBACLzB,GAAG,wBACHqB,MAAOR,EACPS,SAAU,SAACL,GAAD,OAASH,EAAkBG,EAAMM,cAAcF,SACzD,4BAAQA,MAAM,OAAd,SAIJ,kCACE,2BAAOH,QAAQ,kBAAf,WAAwC,0BAAMjB,UAAU,iBAAhB,IAAmCM,EAAYiB,OAA/C,MACxC,4BACEC,KAAK,UACLzB,GAAG,iBACHqB,MAAOV,EACPW,SAAU,SAACL,GAAD,OAASL,EAAWK,EAAMM,cAAcF,SAClD,4BAAQA,MAAM,OAAd,SAIJ,4CChEWK,EAdF,SAAC,GAAU,IAATC,EAAQ,EAARA,IAEX,OADAvB,QAAQC,IAAIsB,GAER,yBAAK3B,GAAG,SAAR,OACH,4DADG,OAIH,8FAJG,OCNF4B,EAAM,WASZ,MAAyCtB,mBAAS,CAACuB,KAAM,GAAIC,QAAS,KAAtE,mBAAsBC,GAAtB,WACA,EAA2CzB,mBAAS,MAApD,mBACA,GADA,UACiCA,oBAAS,IAA1C,mBAAO0B,EAAP,KAAkBC,EAAlB,KAEE,OAAO,yBAAKhC,UAAU,OAEpB,kBAAC,EAAD,MAEE,kBAAC,EAAD,CACEgC,aAAcA,EACdC,cAAeH,IAkBjBC,EAAY,kBAAC,EAAD,MAAc,OAWhCG,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,S","file":"static/js/main.f86881d1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  \n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (props) => {\n\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = ()=>{\n\nreturn(\n<div id=\"loading\">\n*   <h2 className=\"message\">Searching...</h2>\n* </div>\n)\n}\n\nexport default Loading;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\nconsole.log(props)\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\nconst [centuryList, setCenturyList] = useState([])\nconst [classificationList, setClassificationList] = useState([])\nconst [queryString, setQueryString] = useState(\"\")\nconst [century, setCentury] = useState(\"any\")\nconst [classification, setClassification] = useState(\"any\")\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event)=> setQueryString(event.currentTarget.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event)=>setClassification(event.currentTarget.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the classificationList, return an <option /> */}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event)=>setCentury(event.currentTarget.value)}>\n        <option value=\"any\">Any</option>\n        {/* map over the centuryList, return an <option /> */}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title =({num}) =>{\n    console.log(num)\n    return(\n        <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n    )\n}\n\nexport default Title\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  //Feature,\n  Loading,\n // Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\nconst [searchResults, setSearchResults]= useState({info: {}, records: []} )\nconst [featuredResult, setFeaturedResult]= useState(null)\nconst [isLoading, setIsLoading]= useState(false)\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title/>\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    { <Search \n        setIsLoading={setIsLoading}\n        searchResults={setSearchResults}\n        \n    /> }\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    {/* { <Preview \n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n    \n    /> } */}\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    {/* { <Feature\n        featuredResult={featuredResult}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n    /> } */}\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n   {\n      isLoading ? <Loading /> : null\n    }\n\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(<App/>, document.getElementById('app'))"],"sourceRoot":""}